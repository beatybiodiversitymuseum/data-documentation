(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const n of o.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function e(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function i(s){if(s.ep)return;s.ep=!0;const o=e(s);fetch(s.href,o)}})();const p={WAYPOINT:"waypoint",DI_BOX:"di_box",CABINET:"cabinet",FOSSIL:"fossil",UNKNOWN:"unknown"};class y extends Error{constructor(t,e="PATHFINDING_ERROR"){super(t),this.name="PathfindingError",this.code=e}}class ${constructor(){this.nodes=new Set,this.adjacencyList=new Map,this.nodeTypes=new Map,this.nodeCoordinates=new Map,this.walkingPaths=[],this.fixturePolygons=new Map}addNode(t,e=p.UNKNOWN,i=null){if(typeof t!="string"||t.trim()==="")throw new y("Node ID must be a non-empty string","INVALID_NODE_ID");if(this.nodes.add(t),this.nodeTypes.set(t,e),i){if(!Array.isArray(i)||i.length!==2)throw new y("Coordinates must be an array of [longitude, latitude]","INVALID_COORDINATES");this.nodeCoordinates.set(t,i)}this.adjacencyList.has(t)||this.adjacencyList.set(t,new Set)}addEdge(t,e,i=!0){if(!this.nodes.has(t))throw new y(`Source node '${t}' not found in graph`,"NODE_NOT_FOUND");if(!this.nodes.has(e))throw new y(`Target node '${e}' not found in graph`,"NODE_NOT_FOUND");this.adjacencyList.get(t).add(e),i&&this.adjacencyList.get(e).add(t)}getNodeType(t){return this.nodeTypes.get(t)||p.UNKNOWN}getNodeCoordinates(t){return this.nodeCoordinates.get(t)||null}getNeighbors(t){const e=this.adjacencyList.get(t);return e?Array.from(e):[]}hasNode(t){return this.nodes.has(t)}getStatistics(){const t={};for(const e of this.nodeTypes.values())t[e]=(t[e]||0)+1;return{totalNodes:this.nodes.size,nodeTypes:t,totalEdges:Array.from(this.adjacencyList.values()).reduce((e,i)=>e+i.size,0)/2,walkingPaths:this.walkingPaths.length,fixturePolygons:this.fixturePolygons.size}}}class T{constructor(t){if(!(t instanceof $))throw new y("Graph must be an instance of WayfindingGraph","INVALID_GRAPH");this.graph=t}findPath(t,e,i={}){const{allowDirectFixtureConnections:s=!1,maxDepth:o=1e4,excludeNodes:n=new Set}=i;if(!this.graph.hasNode(t))throw new y(`Source node '${t}' not found in graph`,"NODE_NOT_FOUND");if(!this.graph.hasNode(e))throw new y(`Target node '${e}' not found in graph`,"NODE_NOT_FOUND");if(t===e)return[t];this.graph.getNodeType(t),this.graph.getNodeType(e);const a=[[t]],r=new Set([t]);let l=0;for(;a.length>0&&l<o;){l++;const h=a.shift(),d=h[h.length-1],g=this.graph.getNodeType(d);for(const u of this.graph.getNeighbors(d)){if(r.has(u)||n.has(u))continue;const m=this.graph.getNodeType(u);if(!this._canVisitNeighbor(g,m,s))continue;const E=[...h,u];if(u===e)return E;r.add(u),a.push(E)}}return null}getPathDetails(t){if(!t||!Array.isArray(t)||t.length===0)return null;const e=t.map(s=>({id:s,type:this.graph.getNodeType(s),coordinates:this.graph.getNodeCoordinates(s)})),i=t.filter(s=>this.graph.getNodeType(s)===p.WAYPOINT).length;return{path:t,length:t.length,nodes:e,summary:{start:{id:t[0],type:this.graph.getNodeType(t[0])},end:{id:t[t.length-1],type:this.graph.getNodeType(t[t.length-1])},waypointsUsed:i}}}findMultiplePaths(t,e,i=3,s={}){const o=[],n=new Set;for(let a=0;a<i;a++){const r=this.findPath(t,e,{...s,excludeNodes:n});if(!r)break;o.push(r);for(let l=1;l<r.length-1;l++)n.add(r[l])}return o}_canVisitNeighbor(t,e,i){return t===p.WAYPOINT&&e===p.WAYPOINT||this._isFixtureType(t)&&e===p.WAYPOINT||t===p.WAYPOINT&&this._isFixtureType(e)?!0:this._isFixtureType(t)&&this._isFixtureType(e)||t===p.UNKNOWN||e===p.UNKNOWN?i:!1}_isFixtureType(t){return t===p.DI_BOX||t===p.CABINET||t===p.FOSSIL}}function _(c){if(!c||typeof c!="string")return p.UNKNOWN;const t=c.toLowerCase();return t.startsWith("wp_")?p.WAYPOINT:t.startsWith("di_")?p.DI_BOX:t.startsWith("col_")&&t.includes("cab_")?p.CABINET:t.startsWith("fossil_")?p.FOSSIL:p.UNKNOWN}class f extends Error{constructor(t,e="DATA_LOADING_ERROR",i=null){super(t),this.name="DataLoadingError",this.code=e,this.cause=i}}class F{constructor(t={}){this.options={timeout:3e4,retryAttempts:3,retryDelay:1e3,...t}}async loadGeoJSON(t){if(!t||typeof t!="string")throw new f("URL must be a non-empty string","INVALID_URL");let e;for(let i=1;i<=this.options.retryAttempts;i++)try{const s=new AbortController,o=setTimeout(()=>s.abort(),this.options.timeout),n=await fetch(t,{signal:s.signal,headers:{Accept:"application/json"}});if(clearTimeout(o),!n.ok)throw new f(`HTTP ${n.status}: ${n.statusText}`,"HTTP_ERROR");const a=await n.json();if(!this._isValidGeoJSON(a))throw new f("Invalid GeoJSON format","INVALID_GEOJSON");return a}catch(s){e=s,s.name==="AbortError"&&(e=new f(`Request timeout after ${this.options.timeout}ms`,"TIMEOUT",s)),i<this.options.retryAttempts&&(console.warn(`Attempt ${i} failed, retrying in ${this.options.retryDelay}ms...`,s.message),await this._delay(this.options.retryDelay))}throw new f(`Failed to load data after ${this.options.retryAttempts} attempts: ${e.message}`,"MAX_RETRIES_EXCEEDED",e)}async loadMultipleGeoJSON(t){if(!Array.isArray(t))throw new f("URLs must be an array","INVALID_URLS");const e=[],i=[];for(let s=0;s<t.length;s++){const o=t[s];try{const n=await this.loadGeoJSON(o);e.push(n)}catch(n){console.warn(`Failed to load fixture file ${o}:`,n.message),i.push({url:o,error:n.message})}}if(e.length===0&&i.length>0)throw new f(`All fixture files failed to load: ${i.map(s=>s.error).join(", ")}`,"ALL_FILES_FAILED");return i.length>0&&console.warn(`${i.length} of ${t.length} fixture files failed to load`),e}_isValidGeoJSON(t){return t&&typeof t=="object"&&t.type==="FeatureCollection"&&Array.isArray(t.features)}_delay(t){return new Promise(e=>setTimeout(e,t))}}class k{constructor(t={}){this.options={strictValidation:!0,logWarnings:!0,...t}}buildGraph(t,e=[]){var o;const i=new $,s=[];try{this._processPoints(t,i),this._processLines(t,i,s),this._processPolygons(t,i),console.log(`🔍 Processing ${e.length} fixture files...`);for(const n of e)console.log(`🔍 Processing fixture file with ${((o=n.features)==null?void 0:o.length)||0} features`),this._processFixtureData(n,i);return console.log(`🔍 After fixture processing: ${i.fixturePolygons.size} polygons loaded`),i.walkingPaths=s,i}catch(n){throw new f(`Failed to build graph: ${n.message}`,"GRAPH_BUILDING_ERROR",n)}}_processPoints(t,e){for(const i of t.features){if(i.geometry.type!=="Point")continue;const s=i.properties||{},o=s.wayfinding_type,n=s.alt_name;if(o==="walking_grid_point"&&n)e.addNode(n,p.WAYPOINT,i.geometry.coordinates);else if(n){const a=_(n);e.addNode(n,a,i.geometry.coordinates)}}}_processLines(t,e,i){for(const s of t.features){if(s.geometry.type!=="LineString")continue;const o=s.properties||{},n=o.wayfinding_type,a=o.source,r=o.target;if((n==="walking_path"||n==="connection_line")&&a&&r){if(!e.hasNode(a)){const l=_(a);e.addNode(a,l)}if(!e.hasNode(r)){const l=_(r);e.addNode(r,l)}e.addEdge(a,r,!0),n==="walking_path"&&s.geometry.coordinates&&i.push({path:s.geometry.coordinates,source:a,target:r,type:"walking_path"})}}}_processPolygons(t,e){for(const i of t.features){if(i.geometry.type!=="Polygon")continue;const s=i.properties||{},o=s.alt_name;if(o&&e.hasNode(o)){if(e.fixturePolygons.set(o,i.geometry.coordinates[0]),!e.getNodeCoordinates(o)){const n=s.display_point;n&&n.coordinates&&e.nodeCoordinates.set(o,n.coordinates)}}else if(o){const n=_(o),a=s.display_point,r=a&&a.coordinates?a.coordinates:null;e.addNode(o,n,r),e.fixturePolygons.set(o,i.geometry.coordinates[0])}}}_processFixtureData(t,e){let i=0,s=0,o=0;for(const n of t.features){const a=n.properties||{},r=a.alt_name;if(!r){o++;continue}if(n.geometry.type==="Polygon"){if(e.fixturePolygons.set(r,n.geometry.coordinates[0]),i++,!e.hasNode(r)){const l=_(r),h=a.display_point,d=h&&h.coordinates?h.coordinates:null;e.addNode(r,l,d)}}else if(n.geometry.type==="Point")if(s++,e.hasNode(r))e.nodeCoordinates.set(r,n.geometry.coordinates);else{const l=_(r);e.addNode(r,l,n.geometry.coordinates)}}console.log(`🔍 Fixture file processed: ${i} polygons, ${s} points, ${o} skipped`)}}class C{constructor(t={}){this.loader=new F(t.loader),this.builder=new k(t.builder)}async loadAndBuildGraph(t,e=[]){try{const i=await this.loader.loadGeoJSON(t);let s=[];return e.length>0&&(s=await this.loader.loadMultipleGeoJSON(e)),this.builder.buildGraph(i,s)}catch(i){throw new f(`Failed to load and build wayfinding data: ${i.message}`,"LOAD_AND_BUILD_ERROR",i)}}static getDefaultFixtureUrls(t="./geojson"){const e=t.replace(/\/$/,"");return[`${e}/cabinet_fixtures.geojson`,`${e}/di_box_fixtures.geojson`,`${e}/fossil_excavation_fixtures.geojson`]}}class w{constructor(t,e={}){if(!(t instanceof HTMLInputElement))throw new Error("Input element must be an HTMLInputElement");this.inputElement=t,this.options={maxSuggestions:50,minQueryLength:1,placeholder:"Start typing to search...",highlightMatches:!0,showNodeTypes:!0,caseSensitive:!1,...e},this.nodes=[],this.nodeTypes=new Map,this.isOpen=!1,this.currentFocus=-1,this.suggestionsList=null,this._initializeComponent()}_initializeComponent(){this.inputElement.autocomplete="off",this.inputElement.setAttribute("role","combobox"),this.inputElement.setAttribute("aria-expanded","false"),this.inputElement.setAttribute("aria-autocomplete","list"),this.options.placeholder&&(this.inputElement.placeholder=this.options.placeholder),this._createWrapper(),this._bindEventListeners()}_createWrapper(){const t=document.createElement("div");t.className="autocomplete-wrapper",t.style.position="relative",t.style.display="inline-block",t.style.width="100%",this.inputElement.parentNode.insertBefore(t,this.inputElement),t.appendChild(this.inputElement),this.wrapper=t}_bindEventListeners(){this.inputElement.addEventListener("input",t=>{this._handleInput(t)}),this.inputElement.addEventListener("keydown",t=>{this._handleKeydown(t)}),this.inputElement.addEventListener("focus",()=>{this.inputElement.value.length>=this.options.minQueryLength&&this._showSuggestions()}),this.inputElement.addEventListener("blur",t=>{setTimeout(()=>{this._hideSuggestions()},150)}),document.addEventListener("click",t=>{this.wrapper.contains(t.target)||this._hideSuggestions()})}setNodes(t,e=new Map){this.nodes=Array.isArray(t)?[...t].sort():[],this.nodeTypes=e}getValue(){return this.inputElement.value.trim()}setValue(t){this.inputElement.value=t||"",this._hideSuggestions()}clear(){this.setValue("")}focus(){this.inputElement.focus()}_handleInput(t){const e=t.target.value.trim();if(e.length<this.options.minQueryLength){this._hideSuggestions();return}this._showSuggestions(e)}_handleKeydown(t){if(!this.isOpen||!this.suggestionsList)return;const e=this.suggestionsList.querySelectorAll(".autocomplete-item");switch(t.key){case"ArrowDown":t.preventDefault(),this.currentFocus=Math.min(this.currentFocus+1,e.length-1),this._updateFocus(e);break;case"ArrowUp":t.preventDefault(),this.currentFocus=Math.max(this.currentFocus-1,-1),this._updateFocus(e);break;case"Enter":t.preventDefault(),this.currentFocus>=0&&e[this.currentFocus]&&this._selectSuggestion(e[this.currentFocus]);break;case"Escape":this._hideSuggestions();break}}_showSuggestions(t=""){const e=this._getSuggestions(t);if(e.length===0){this._showNoResults();return}this._renderSuggestions(e),this._setAriaAttributes(!0),this.isOpen=!0}_hideSuggestions(){this.suggestionsList&&(this.suggestionsList.remove(),this.suggestionsList=null),this._setAriaAttributes(!1),this.isOpen=!1,this.currentFocus=-1}_getSuggestions(t){if(!t)return[];const e=this.options.caseSensitive?t:t.toLowerCase(),i=[];for(const s of this.nodes){const o=this.options.caseSensitive?s:s.toLowerCase();if(o.includes(e)){const n=this.nodeTypes.get(s)||"unknown";if(i.push({id:s,type:n,matchIndex:o.indexOf(e)}),i.length>=this.options.maxSuggestions)break}}return i.sort((s,o)=>s.matchIndex!==o.matchIndex?s.matchIndex-o.matchIndex:s.id.localeCompare(o.id))}_renderSuggestions(t){this._hideSuggestions();const e=document.createElement("div");e.className="autocomplete-suggestions",e.setAttribute("role","listbox"),Object.assign(e.style,{position:"absolute",top:"100%",left:"0",right:"0",maxHeight:"200px",overflowY:"auto",backgroundColor:"white",border:"1px solid #ddd",borderTop:"none",borderRadius:"0 0 4px 4px",boxShadow:"0 2px 8px rgba(0,0,0,0.1)",zIndex:"1000"}),t.forEach((i,s)=>{const o=this._createSuggestionItem(i,s);e.appendChild(o)}),this.wrapper.appendChild(e),this.suggestionsList=e}_createSuggestionItem(t,e){const i=document.createElement("div");i.className="autocomplete-item",i.setAttribute("role","option"),i.setAttribute("data-node-id",t.id),Object.assign(i.style,{padding:"10px 12px",cursor:"pointer",borderBottom:"1px solid #eee",fontSize:"14px"});let s=t.id;if(this.options.highlightMatches){const o=this.inputElement.value.trim(),n=this.options.caseSensitive?o:o.toLowerCase(),r=(this.options.caseSensitive?t.id:t.id.toLowerCase()).indexOf(n);if(r>=0){const l=t.id.substring(0,r),h=t.id.substring(r,r+o.length),d=t.id.substring(r+o.length);s=`${l}<strong>${h}</strong>${d}`}}if(i.innerHTML=s,this.options.showNodeTypes&&t.type!=="unknown"){const o=document.createElement("span");o.className="node-type-badge",o.textContent=t.type.replace("_"," "),Object.assign(o.style,{marginLeft:"8px",fontSize:"12px",color:this._getTypeColor(t.type),fontStyle:"italic"}),i.appendChild(o)}return i.addEventListener("click",()=>{this._selectSuggestion(i)}),i.addEventListener("mouseenter",()=>{this.currentFocus=e,this._updateFocus()}),i}_showNoResults(){this._hideSuggestions();const t=document.createElement("div");t.className="autocomplete-suggestions",Object.assign(t.style,{position:"absolute",top:"100%",left:"0",right:"0",backgroundColor:"white",border:"1px solid #ddd",borderTop:"none",borderRadius:"0 0 4px 4px",boxShadow:"0 2px 8px rgba(0,0,0,0.1)",zIndex:"1000",padding:"10px 12px",fontSize:"14px",color:"#666",fontStyle:"italic"}),t.textContent="No matches found",this.wrapper.appendChild(t),this.suggestionsList=t,this.isOpen=!0}_selectSuggestion(t){const e=t.getAttribute("data-node-id");this.setValue(e),this.inputElement.dispatchEvent(new CustomEvent("autocomplete:select",{detail:{nodeId:e,nodeType:this.nodeTypes.get(e)}}))}_updateFocus(t=null){var e;t||(t=((e=this.suggestionsList)==null?void 0:e.querySelectorAll(".autocomplete-item"))||[]),t.forEach((i,s)=>{s===this.currentFocus?(i.style.backgroundColor="#e3f2fd",i.setAttribute("aria-selected","true")):(i.style.backgroundColor="",i.setAttribute("aria-selected","false"))})}_setAriaAttributes(t){if(this.inputElement.setAttribute("aria-expanded",t.toString()),t&&this.suggestionsList){const e=`autocomplete-list-${Date.now()}`;this.suggestionsList.id=e,this.inputElement.setAttribute("aria-owns",e)}else this.inputElement.removeAttribute("aria-owns")}_getTypeColor(t){return{waypoint:"#1565c0",di_box:"#ef6c00",cabinet:"#7b1fa2",fossil:"#2e7d32"}[t]||"#666"}destroy(){this._hideSuggestions(),this.inputElement.removeEventListener("input",this._handleInput),this.inputElement.removeEventListener("keydown",this._handleKeydown),this.wrapper&&this.wrapper.parentNode&&(this.wrapper.parentNode.insertBefore(this.inputElement,this.wrapper),this.wrapper.remove())}}const A="modulepreload",D=function(c){return"/"+c},L={},S=function(t,e,i){let s=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const n=document.querySelector("meta[property=csp-nonce]"),a=(n==null?void 0:n.nonce)||(n==null?void 0:n.getAttribute("nonce"));s=Promise.allSettled(e.map(r=>{if(r=D(r),r in L)return;L[r]=!0;const l=r.endsWith(".css"),h=l?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${r}"]${h}`))return;const d=document.createElement("link");if(d.rel=l?"stylesheet":A,l||(d.as="script"),d.crossOrigin="",d.href=r,a&&d.setAttribute("nonce",a),document.head.appendChild(d),l)return new Promise((g,u)=>{d.addEventListener("load",g),d.addEventListener("error",()=>u(new Error(`Unable to preload CSS for ${r}`)))})}))}function o(n){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=n,window.dispatchEvent(a),!a.defaultPrevented)throw n}return s.then(n=>{for(const a of n||[])a.status==="rejected"&&o(a.reason);return t().catch(o)})};class v{async initialize(t,e={}){throw new Error("initialize method must be implemented by search provider")}search(t,e={}){throw new Error("search method must be implemented by search provider")}updateData(t){throw new Error("updateData method must be implemented by search provider")}getConfig(){throw new Error("getConfig method must be implemented by search provider")}updateConfig(t){throw new Error("updateConfig method must be implemented by search provider")}destroy(){}}class O extends v{constructor(){super(),this.data=[],this.config={caseSensitive:!1,maxResults:50,minQueryLength:1}}async initialize(t,e={}){return this.data=t||[],this.config={...this.config,...e},this}search(t,e={}){if(!t||t.length<this.config.minQueryLength)return[];const i={...this.config,...e},s=i.caseSensitive?t:t.toLowerCase(),o=[];for(const n of this.data){const a=this._getSearchableText(n),r=i.caseSensitive?a:a.toLowerCase();if(r.includes(s)&&(o.push({item:n,score:this._calculateScore(s,r),matches:[{key:"searchText",value:a,indices:[[r.indexOf(s),r.indexOf(s)+s.length]]}]}),o.length>=i.maxResults))break}return o.sort((n,a)=>a.score-n.score)}updateData(t){this.data=t||[]}getConfig(){return{...this.config}}updateConfig(t){this.config={...this.config,...t}}_getSearchableText(t){return typeof t=="string"?t:t.id?t.id:t.name?t.name:String(t)}_calculateScore(t,e){const i=e.indexOf(t);return i===0?1:i>0?.8-i/e.length*.3:.5}}const N=Object.freeze(Object.defineProperty({__proto__:null,SearchInterface:v,SimpleSearchProvider:O},Symbol.toStringTag,{value:"Module"}));class W extends v{constructor(){super(),this.fuse=null,this.data=[],this.config={keys:[{name:"id",weight:.5},{name:"alt_name",weight:.7},{name:"name",weight:.4},{name:"alternativeNames",weight:.8},{name:"type",weight:.3},{name:"category",weight:.3},{name:"nodeType",weight:.2}],threshold:.6,distance:100,includeScore:!0,includeMatches:!0,minMatchCharLength:1,ignoreLocation:!0,ignoreFieldNorm:!1,maxResults:50,minQueryLength:1}}async initialize(t,e={}){if(typeof window<"u"&&!window.Fuse)throw new Error("Fuse.js is not loaded. Please include Fuse.js library.");this.config={...this.config,...e},this.data=t||[];const i={...this.config};return delete i.maxResults,delete i.minQueryLength,this.fuse=new window.Fuse(this.data,i),this}search(t,e={}){if(!this.fuse||!t||t.length<this.config.minQueryLength)return[];const i={...this.config,...e},s=this.fuse.search(t,{limit:i.maxResults*2}),o=new Set,n=[];for(const a of s){const r=a.item.id;if(!o.has(r)&&(o.add(r),n.push({item:a.item,score:1-a.score,matches:a.matches||[],originalScore:a.score,refIndex:a.refIndex}),n.length>=i.maxResults))break}return n}updateData(t){this.data=t||[],this.fuse&&this.fuse.setCollection(this.data)}getConfig(){return{...this.config}}updateConfig(t){if(this.config={...this.config,...t},this.fuse&&this.data.length>0){const e={...this.config};delete e.maxResults,delete e.minQueryLength,this.fuse=new window.Fuse(this.data,e)}}getBestMatch(t){if(!t.matches||t.matches.length===0)return t.item.id||t.item.name||String(t.item);let e=t.matches[0];for(const i of t.matches){if((i.key==="alt_name"||i.key==="alternativeNames")&&i.value){e=i;break}i.score&&(!e.score||i.score<e.score)&&(e=i)}return e.value||t.item.id||t.item.name||String(t.item)}highlightMatches(t,e){if(!e||e.length===0)return t;let i="",s=0;for(const[o,n]of e)i+=t.slice(s,o),i+=`<mark class="search-highlight">${t.slice(o,n+1)}</mark>`,s=n+1;return i+=t.slice(s),i}destroy(){this.fuse=null,this.data=[]}}async function M(c="fuse"){switch(c.toLowerCase()){case"fuse":try{return new W}catch(e){console.warn("Fuse.js not available, falling back to simple search:",e.message);const{SimpleSearchProvider:i}=await S(async()=>{const{SimpleSearchProvider:s}=await Promise.resolve().then(()=>N);return{SimpleSearchProvider:s}},void 0);return new i}case"simple":default:const{SimpleSearchProvider:t}=await S(async()=>{const{SimpleSearchProvider:e}=await Promise.resolve().then(()=>N);return{SimpleSearchProvider:e}},void 0);return new t}}class x{constructor(t={}){this.options={idField:"id",nameField:"name",altNameField:"alt_name",categoryField:"category",typeField:"type",includeProperties:!0,includeGeometry:!1,fieldExtractors:{},...t}}async loadFromUrls(t){const e=[],i=new Set;for(const s of t)try{const o=await this.loadFromUrl(s);for(const n of o)i.has(n.id)?console.log(`🔄 Skipping duplicate item: ${n.id}`):(i.add(n.id),e.push(n))}catch(o){console.warn(`Failed to load GeoJSON from ${s}:`,o.message)}return console.log(`📊 Loaded ${e.length} unique items (deduplicated from ${t.length} files)`),e}async loadFromUrl(t){const e=await fetch(t);if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const i=await e.json();return this.processGeoJSON(i)}processGeoJSON(t){if(!t||t.type!=="FeatureCollection"||!t.features)throw new Error("Invalid GeoJSON FeatureCollection");return t.features.map((e,i)=>this._processFeature(e,i)).filter(e=>e!==null)}_processFeature(t,e){if(!t||!t.properties)return null;const i=t.properties,s={id:this._extractField(t,i,this.options.idField)||t.id||`feature_${e}`,name:this._extractField(t,i,this.options.nameField),alt_name:this._extractField(t,i,this.options.altNameField),type:this._extractField(t,i,this.options.typeField)||"feature",category:this._extractField(t,i,this.options.categoryField),alternativeNames:this._extractAlternativeNames(t,i),originalFeature:t,featureIndex:e};this.options.includeProperties&&(s.properties={...i}),this.options.includeGeometry&&t.geometry&&(s.geometry=t.geometry,i.display_point&&(s.displayPoint=i.display_point));for(const[o,n]of Object.entries(this.options.fieldExtractors))if(typeof n=="function")try{s[o]=n(t,i,s)}catch(a){console.warn(`Custom field extractor for '${o}' failed:`,a.message)}return s}_extractField(t,e,i){if(!i)return null;if(e[i]!==void 0)return e[i];if(t[i]!==void 0)return t[i];const s=i.toLowerCase();for(const[o,n]of Object.entries(e))if(o.toLowerCase()===s)return n;return null}_extractAlternativeNames(t,e){const i=[],s=["alternative_names","alt_names","aliases","alternate_names","short_name","display_name","common_name","nickname"];for(const a of s){const r=this._extractField(t,e,a);r&&(Array.isArray(r)?i.push(...r.filter(l=>typeof l=="string")):typeof r=="string"&&i.push(r))}const o=e.name,n=e.alt_name;return o&&n&&o!==n&&(i.push(o,n),o.includes(" ")&&i.push(...o.split(" ").filter(a=>a.length>2)),n.includes("_")&&i.push(...n.split("_").filter(a=>a.length>2))),[...new Set(i.filter(a=>a&&a.trim()))]}static createPreset(t){const e={imdf:{idField:"id",nameField:"name",altNameField:"alt_name",categoryField:"category",typeField:"feature_type",includeGeometry:!0,fieldExtractors:{level_id:(s,o)=>o.level_id,anchor_id:(s,o)=>o.anchor_id}},wayfinding:{idField:"alt_name",nameField:"name",altNameField:"alt_name",categoryField:"category",typeField:"feature_type",includeGeometry:!0,fieldExtractors:{nodeType:(s,o)=>o.feature_type?o.feature_type:o.type?o.type:o.category?o.category:"unknown",uuid:(s,o)=>s.id,alternativeNames:(s,o)=>{const n=[];if(o.alt_name&&n.push(o.alt_name),o.name){n.push(o.name);const a=o.name.split(/[,\s]+/).filter(r=>r.length>2);n.push(...a)}return n}}},simple:{idField:"id",nameField:"name",includeProperties:!1,includeGeometry:!1}},i=e[t]||e.simple;return new x(i)}}class b{constructor(t,e={}){if(!(t instanceof HTMLInputElement))throw new Error("Input element must be an HTMLInputElement");this.inputElement=t,this.options={searchProvider:"fuse",searchConfig:{threshold:.4,maxResults:50,minQueryLength:2},dataUrls:[],dataLoaderPreset:"wayfinding",placeholder:"Start typing to search...",highlightMatches:!0,showNodeTypes:!0,showScores:!1,caseSensitive:!1,autoSelectFirst:!1,clearOnSelect:!1,...e},this.searchProvider=null,this.dataLoader=null,this.searchData=[],this.isOpen=!1,this.currentFocus=-1,this.suggestionsList=null,this.isInitialized=!1,this._initializeComponent()}async _initializeComponent(){try{this._setupInputElement(),this._createWrapper(),await this._initializeSearchProvider(),this._initializeDataLoader(),this.options.dataUrls.length>0&&await this.loadData(this.options.dataUrls),this._bindEventListeners(),this.isInitialized=!0,this.inputElement.dispatchEvent(new CustomEvent("enhanced-autocomplete:ready",{detail:{component:this}}))}catch(t){console.error("Failed to initialize enhanced autocomplete:",t),this.inputElement.dispatchEvent(new CustomEvent("enhanced-autocomplete:error",{detail:{error:t.message}}))}}_setupInputElement(){this.inputElement.autocomplete="off",this.inputElement.setAttribute("role","combobox"),this.inputElement.setAttribute("aria-expanded","false"),this.inputElement.setAttribute("aria-autocomplete","list"),this.options.placeholder&&(this.inputElement.placeholder=this.options.placeholder)}_createWrapper(){const t=document.createElement("div");t.className="enhanced-autocomplete-wrapper",t.style.cssText="position: relative; display: inline-block; width: 100%;",this.inputElement.parentNode.insertBefore(t,this.inputElement),t.appendChild(this.inputElement),this.wrapper=t}async _initializeSearchProvider(){this.searchProvider=await M(this.options.searchProvider),await this.searchProvider.initialize([],this.options.searchConfig)}_initializeDataLoader(){this.dataLoader=x.createPreset(this.options.dataLoaderPreset)}async loadData(t){try{this.searchData=await this.dataLoader.loadFromUrls(t),this.searchProvider.updateData(this.searchData),this.inputElement.dispatchEvent(new CustomEvent("enhanced-autocomplete:data-loaded",{detail:{count:this.searchData.length,data:this.searchData}}))}catch(e){console.error("Failed to load search data:",e),this.inputElement.dispatchEvent(new CustomEvent("enhanced-autocomplete:data-error",{detail:{error:e.message}}))}}setData(t){this.searchData=t||[],this.searchProvider&&this.searchProvider.updateData(this.searchData)}_bindEventListeners(){this.inputElement.addEventListener("input",t=>{this._handleInput(t)}),this.inputElement.addEventListener("keydown",t=>{this._handleKeydown(t)}),this.inputElement.addEventListener("focus",()=>{this.inputElement.value.length>=this.options.searchConfig.minQueryLength&&this._showSuggestions()}),this.inputElement.addEventListener("blur",t=>{setTimeout(()=>{this._hideSuggestions()},150)}),document.addEventListener("click",t=>{this.wrapper.contains(t.target)||this._hideSuggestions()})}_handleInput(t){const e=t.target.value.trim();if(e.length<this.options.searchConfig.minQueryLength){this._hideSuggestions();return}this._showSuggestions(e)}_handleKeydown(t){if(!this.isOpen||!this.suggestionsList)return;const e=this.suggestionsList.querySelectorAll(".autocomplete-item");switch(t.key){case"ArrowDown":t.preventDefault(),this.currentFocus=Math.min(this.currentFocus+1,e.length-1),this._updateFocus(e);break;case"ArrowUp":t.preventDefault(),this.currentFocus=Math.max(this.currentFocus-1,-1),this._updateFocus(e);break;case"Enter":t.preventDefault(),this.currentFocus>=0&&e[this.currentFocus]?this._selectSuggestion(e[this.currentFocus]):this.options.autoSelectFirst&&e.length>0&&this._selectSuggestion(e[0]);break;case"Escape":this._hideSuggestions();break}}_showSuggestions(t=""){if(!this.searchProvider||!t){this._showNoResults();return}const e=this.searchProvider.search(t,this.options.searchConfig);if(e.length===0){this._showNoResults();return}this._renderSuggestions(e,t),this._setAriaAttributes(!0),this.isOpen=!0}_hideSuggestions(){this.suggestionsList&&(this.suggestionsList.remove(),this.suggestionsList=null),this._setAriaAttributes(!1),this.isOpen=!1,this.currentFocus=-1}_renderSuggestions(t,e){console.log("🎨 Rendering suggestions:",t.length,"results for query:",e),this._hideSuggestions();const i=document.createElement("div");i.className="enhanced-autocomplete-suggestions",i.setAttribute("role","listbox"),this._applySuggestionStyles(i),t.forEach((s,o)=>{const n=this._createSuggestionItem(s,e,o);i.appendChild(n),console.log(`  📝 Added item ${o+1}:`,s.item.id)}),this.wrapper.appendChild(i),this.suggestionsList=i,console.log("✅ Suggestions list appended to wrapper, total items:",i.children.length)}_applySuggestionStyles(t){t.style.cssText=`
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      max-height: 300px;
      overflow-y: auto;
      background-color: white;
      border: 1px solid #ddd;
      border-top: none;
      border-radius: 0 0 5px 5px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      z-index: 1000;
    `}_createSuggestionItem(t,e,i){const s=document.createElement("div");s.className="autocomplete-item",s.setAttribute("role","option"),s.setAttribute("data-item-id",t.item.id),s.style.cssText=`
      padding: 12px 15px;
      cursor: pointer;
      border-bottom: 1px solid #eee;
      font-size: 14px;
      line-height: 1.4;
    `;let o=t.item.name||t.item.alt_name||t.item.id||"Unknown ID",n="name";if(t.matches&&t.matches.length>0){const d=t.matches.find(m=>m.key==="name"&&m.value),g=t.matches.find(m=>m.key==="alternativeNames"&&m.value),u=t.matches.find(m=>m.key==="alt_name"&&m.value);d?(o=d.value,n="name"):g?(o=g.value,n="alternativeNames"):u&&(o=u.value,n="alt_name")}o===t.item.id&&t.item.name&&(o=t.item.name);let a=o;if(this.options.highlightMatches&&t.matches){const d=t.matches.find(g=>g.key===n);if(d&&d.indices&&this.searchProvider.highlightMatches)try{a=this.searchProvider.highlightMatches(o,d.indices)}catch(g){console.warn("Highlighting failed:",g),a=o}}const r=document.createElement("div");r.innerHTML=a,r.style.fontWeight="500",s.appendChild(r);const l=document.createElement("div");l.style.cssText="font-size: 12px; color: #666; margin-top: 2px;";const h=[];return t.item.id&&t.item.id!==o&&h.push(`ID: ${t.item.id}`),t.item.type&&t.item.type!=="fixture"&&h.push(`Type: ${t.item.type}`),t.item.category&&h.push(`Category: ${t.item.category}`),o===t.item.name&&t.item.alt_name&&t.item.alt_name!==t.item.name&&h.push(`Alt: ${t.item.alt_name}`),this.options.showScores&&h.push(`Score: ${t.score.toFixed(3)}`),h.length>0&&(l.textContent=h.join(" | "),s.appendChild(l)),s.addEventListener("click",()=>{this._selectSuggestion(s)}),s.addEventListener("mouseenter",()=>{this.currentFocus=i,this._updateFocus()}),s._resultData=t,s}_showNoResults(){this._hideSuggestions();const t=document.createElement("div");t.className="enhanced-autocomplete-suggestions",this._applySuggestionStyles(t),t.innerHTML=`
      <div style="padding: 12px 15px; font-size: 14px; color: #666; font-style: italic;">
        No matches found
      </div>
    `,this.wrapper.appendChild(t),this.suggestionsList=t,this.isOpen=!0}_selectSuggestion(t){const e=t.getAttribute("data-item-id"),i=t._resultData;this.setValue(e),this.inputElement.dispatchEvent(new CustomEvent("enhanced-autocomplete:select",{detail:{id:e,result:i,item:i==null?void 0:i.item}})),this.options.clearOnSelect&&this.clear()}_updateFocus(t=null){var e;t||(t=((e=this.suggestionsList)==null?void 0:e.querySelectorAll(".autocomplete-item"))||[]),t.forEach((i,s)=>{s===this.currentFocus?(i.style.backgroundColor="#e3f2fd",i.setAttribute("aria-selected","true")):(i.style.backgroundColor="",i.setAttribute("aria-selected","false"))})}_setAriaAttributes(t){if(this.inputElement.setAttribute("aria-expanded",t.toString()),t&&this.suggestionsList){const e=`enhanced-autocomplete-list-${Date.now()}`;this.suggestionsList.id=e,this.inputElement.setAttribute("aria-owns",e)}else this.inputElement.removeAttribute("aria-owns")}getValue(){return this.inputElement.value.trim()}setValue(t){this.inputElement.value=t||"",this._hideSuggestions()}clear(){this.setValue("")}focus(){this.inputElement.focus()}updateSearchConfig(t){this.options.searchConfig={...this.options.searchConfig,...t},this.searchProvider&&this.searchProvider.updateConfig(this.options.searchConfig)}getStats(){return{isInitialized:this.isInitialized,dataCount:this.searchData.length,searchProvider:this.options.searchProvider,isOpen:this.isOpen}}destroy(){this._hideSuggestions(),this.searchProvider&&this.searchProvider.destroy(),this.wrapper&&this.wrapper.parentNode&&(this.wrapper.parentNode.insertBefore(this.inputElement,this.wrapper),this.wrapper.remove())}}class I{constructor(t,e={}){if(!(t instanceof HTMLFormElement))throw new Error("Form element must be an HTMLFormElement");this.formElement=t,this.options={enableKeyboardShortcuts:!0,enableExamples:!0,showLoadingIndicator:!0,useEnhancedSearch:!0,searchConfig:{threshold:.4,maxResults:50,minQueryLength:2},...e},this.sourceInput=null,this.targetInput=null,this.sourceAutocomplete=null,this.targetAutocomplete=null,this.submitButton=null,this.loadGraphButton=null,this.resultContainer=null,this.intermediateWaypoints=[],this.waypointsContainer=null,this.addWaypointButton=null,this.pathfinder=null,this.graph=null,this.isLoading=!1,this.graphLoaded=!1,this._initializeComponent()}_initializeComponent(){this._findElements(),this._setupAutocomplete(),this._bindEventListeners(),this._setupKeyboardShortcuts(),this._setupWaypointControls(),this.options.enableExamples&&this._setupExamples()}_findElements(){if(this.sourceInput=this.formElement.querySelector("#source")||this.formElement.querySelector('input[name="source"]'),this.targetInput=this.formElement.querySelector("#target")||this.formElement.querySelector('input[name="target"]'),this.submitButton=this.formElement.querySelector('button[type="submit"]'),this.loadGraphButton=this.formElement.querySelector("#loadGraphBtn"),this.resultContainer=document.querySelector("#result"),this.waypointsContainer=document.querySelector("#waypointsContainer"),this.addWaypointButton=document.querySelector("#addWaypointBtn"),!this.sourceInput||!this.targetInput)throw new Error("Source and target input elements are required")}_setupAutocomplete(){this.commonAutocompleteConfig={enhanced:{dataUrls:["./public/geojson/wayfinding.geojson","./public/geojson/cabinet_fixtures.geojson","./public/geojson/di_box_fixtures.geojson","./public/geojson/fossil_excavation_fixtures.geojson"],searchProvider:"fuse",searchConfig:this.options.searchConfig,dataLoaderPreset:"wayfinding",showScores:!1,highlightMatches:!0},basic:{minQueryLength:2,maxSuggestions:10}},this.options.useEnhancedSearch?(this.sourceAutocomplete=new b(this.sourceInput,{placeholder:"cabinet, fossil, DI box 27, wp_001...",...this.commonAutocompleteConfig.enhanced}),this.targetAutocomplete=new b(this.targetInput,{placeholder:"cabinet 01, waypoint, wp_002...",...this.commonAutocompleteConfig.enhanced})):(this.sourceAutocomplete=new w(this.sourceInput,{placeholder:"Enter source fixture or waypoint ID...",...this.commonAutocompleteConfig.basic}),this.targetAutocomplete=new w(this.targetInput,{placeholder:"Enter target fixture or waypoint ID...",...this.commonAutocompleteConfig.basic}))}_bindEventListeners(){this.formElement.addEventListener("submit",t=>{t.preventDefault(),this._handleFormSubmission()}),this.loadGraphButton&&this.loadGraphButton.addEventListener("click",t=>{t.preventDefault(),this._emitEvent("pathfinding:load-graph",{})}),this.sourceInput.addEventListener("autocomplete:select",t=>{this._emitEvent("pathfinding:autocomplete-select",{field:"source",nodeId:t.detail.nodeId,nodeType:t.detail.nodeType})}),this.targetInput.addEventListener("autocomplete:select",t=>{this._emitEvent("pathfinding:autocomplete-select",{field:"target",nodeId:t.detail.nodeId,nodeType:t.detail.nodeType})})}_handleFormSubmission(){const t=this.getFormData(),e=this.validateForm();if(!e.isValid){this.showValidationErrors(e.errors);return}this._handleSubmitWithWaypoints(t)}_setupKeyboardShortcuts(){this.options.enableKeyboardShortcuts&&document.addEventListener("keydown",t=>{(t.ctrlKey||t.metaKey)&&t.key==="Enter"&&(t.preventDefault(),this.graphLoaded?this._handleFormSubmission():this._emitEvent("pathfinding:load-graph",{}))})}_setupExamples(){}setAutocompleteData(t,e){if(this.options.useEnhancedSearch){const i=t.map(s=>({id:s,name:s,type:e.get(s)||"waypoint",category:"navigation"}));this.sourceAutocomplete.setData&&this.sourceAutocomplete.setData([...this.sourceAutocomplete.searchData,...i]),this.targetAutocomplete.setData&&this.targetAutocomplete.setData([...this.targetAutocomplete.searchData,...i])}else this.sourceAutocomplete.setNodes(t,e),this.targetAutocomplete.setNodes(t,e);this._updateWaypointAutocompletes(t,e)}_updateWaypointAutocompletes(t,e){this.intermediateWaypoints.forEach((i,s)=>{if(i.autocomplete)if(this.options.useEnhancedSearch){const o=t.map(n=>({id:n,name:n,type:e.get(n)||"waypoint",category:"navigation"}));i.autocomplete.setData&&i.autocomplete.setData([...i.autocomplete.searchData,...o])}else i.autocomplete.setNodes(t,e)})}getFormData(){const t=this.intermediateWaypoints.filter(e=>e.id).map(e=>e.id);return console.log("Form data:",{source:this.sourceAutocomplete.getValue(),target:this.targetAutocomplete.getValue(),waypoints:t,intermediateWaypoints:this.intermediateWaypoints}),{source:this.sourceAutocomplete.getValue(),target:this.targetAutocomplete.getValue(),waypoints:t,hasWaypoints:t.length>0}}validateForm(){const t=this.getFormData(),e=[];t.source||e.push({field:"source",message:"Source fixture or waypoint is required"}),t.target||e.push({field:"target",message:"Target fixture or waypoint is required"});const i=this.intermediateWaypoints.filter(s=>s.id).map(s=>s.id);for(let s=0;s<i.length-1;s++)i[s]===i[s+1]&&e.push({field:`waypoint-${s+1}`,message:`Waypoint ${s+2} cannot be the same as waypoint ${s+1}`});return i.length>0&&i[0]===t.source&&e.push({field:"waypoint-0",message:"First waypoint cannot be the same as source"}),i.length>0&&i[i.length-1]===t.target&&e.push({field:`waypoint-${i.length-1}`,message:"Last waypoint cannot be the same as target"}),{isValid:e.length===0,errors:e}}showValidationErrors(t){const e=t.map(i=>`<li>${i.message}</li>`).join("");this.showResult(`
      <h3>⚠️ Form Validation Errors</h3>
      <ul>${e}</ul>
    `,"error")}setExample(t,e){this.sourceAutocomplete.setValue(t),this.targetAutocomplete.setValue(e)}clearForm(){this.sourceAutocomplete.clear(),this.targetAutocomplete.clear(),this.clearResults(),this.intermediateWaypoints.forEach(t=>{t.autocomplete&&t.autocomplete.clear()})}showLoading(t="Loading..."){this.resultContainer&&(this.resultContainer.innerHTML=`
      <div class="loading">
        <div class="loading-spinner">⏳</div>
        <div class="loading-message">${t}</div>
      </div>
    `,this.resultContainer.className="loading",this.isLoading=!0,this._updateLoadingState())}showResult(t,e="info"){this.resultContainer&&(this.resultContainer.innerHTML=t,this.resultContainer.className=e,this.isLoading=!1,this._updateLoadingState())}clearResults(){this.resultContainer&&(this.resultContainer.innerHTML="",this.resultContainer.className="",this.isLoading=!1,this._updateLoadingState())}setGraphLoaded(t){this.graphLoaded=t,this.submitButton&&(this.submitButton.disabled=!t)}_updateLoadingState(){this.submitButton&&(this.submitButton.disabled=this.isLoading||!this.graphLoaded,this.submitButton.textContent=this.isLoading?"Calculating...":"🔍 Find Path"),this.loadGraphButton&&(this.loadGraphButton.disabled=this.isLoading,this.loadGraphButton.textContent=this.isLoading?"Loading...":"Load Graph Data")}_setupWaypointControls(){this.addWaypointButton&&this.addWaypointButton.addEventListener("click",()=>{this._addIntermediateWaypoint()})}setPathfinder(t,e){this.pathfinder=t,this.graph=e}_addIntermediateWaypoint(){if(this.intermediateWaypoints.length>=8)return;const t=this.intermediateWaypoints.length,e={id:null,type:null,coordinates:null,autocomplete:null,input:null};this.intermediateWaypoints.push(e),this._updateWaypointsDisplay(),setTimeout(()=>{this._setupWaypointAutocomplete(t)},100)}_updateWaypointsDisplay(){if(!this.waypointsContainer)return;let t="";this.intermediateWaypoints.forEach((e,i)=>{const s=e.id!==null;s&&`${e.id}${e.type}`,t+=`
        <div class="form-group waypoint-item" data-index="${i}">
          <div class="waypoint-header">
            <label for="waypoint-${i}">

              Via Waypoint ${i+1}:
            </label>
          </div>
          <div class="waypoint-input-container" style="display: flex; align-items: center; gap: 10px;">
            <div class="autocomplete" role="combobox" aria-expanded="false" aria-haspopup="listbox" style="flex: 1;">
              <input 
                type="text" 
                id="waypoint-${i}" 
                class="waypoint-input"
                placeholder="e.g., wp_010 or intermediate fixture..."
                value="${s?e.id:""}"
                autocomplete="off"
                aria-autocomplete="list"
                role="textbox"
              >
            </div>
            <button type="button" class="btn-remove-waypoint" data-index="${i}" title="Remove this waypoint" style="background: #dc3545; color: white; border: none; width: 32px; height: 32px; min-width: 32px; min-height: 32px; border-radius: 50%; cursor: pointer; font-size: 18px; font-weight: bold; flex-shrink: 0; display: flex; align-items: center; justify-content: center; line-height: 1; box-sizing: border-box; padding: 0;">×</button>
          </div>

        </div>
      `}),this.waypointsContainer.innerHTML=t,this.waypointsContainer.addEventListener("click",e=>{if(e.target.classList.contains("btn-remove-waypoint")){const i=parseInt(e.target.dataset.index);this._removeIntermediateWaypoint(i)}})}_setupWaypointAutocomplete(t){var s;console.log(`Setting up autocomplete for waypoint ${t}`);const e=(s=this.waypointsContainer)==null?void 0:s.querySelector(`#waypoint-${t}`);if(!e){console.log(`Input not found for waypoint ${t}`);return}console.log(`Found input for waypoint ${t}:`,e);let i;if(this.options.useEnhancedSearch)i=new b(e,{placeholder:`Search waypoint ${t+1}: cabinet, fossil, DI box, wp_...`,...this.commonAutocompleteConfig.enhanced});else if(i=new w(e,{placeholder:`Search for waypoint ${t+1}...`,...this.commonAutocompleteConfig.basic}),this.graph){const o=Array.from(this.graph.nodes);i.setNodes(o,this.graph.nodeTypes)}this.intermediateWaypoints[t].autocomplete=i,this.intermediateWaypoints[t].input=e,e.addEventListener("autocomplete:select",o=>{var r;console.log(`Waypoint ${t} autocomplete selected:`,o.detail);const n=o.detail.nodeId||o.detail.id||o.detail.value,a=o.detail.nodeType||o.detail.type||((r=this.graph)==null?void 0:r.getNodeType(n));this._setIntermediateWaypoint(t,n,a)}),e.addEventListener("enhanced-autocomplete:select",o=>{var r;console.log(`Waypoint ${t} enhanced autocomplete selected:`,o.detail);const n=o.detail.id||o.detail.nodeId||o.detail.value,a=o.detail.type||o.detail.nodeType||((r=this.graph)==null?void 0:r.getNodeType(n));this._setIntermediateWaypoint(t,n,a)}),e.addEventListener("blur",()=>{setTimeout(()=>{var n;const o=e.value.trim();if(console.log(`Waypoint ${t} blur input (delayed):`,o),o&&((n=this.graph)!=null&&n.hasNode(o))){const a=this.graph.getNodeType(o);console.log(`Valid node found: ${o} (${a})`),this._setIntermediateWaypoint(t,o,a)}else o&&(console.log(`Invalid node: ${o} not found in graph`),this._validateWaypoint(t))},100)}),e.addEventListener("keydown",o=>{var n;if(o.key==="Enter"){o.preventDefault();const a=e.value.trim();if(console.log(`Waypoint ${t} Enter key:`,a),a&&((n=this.graph)!=null&&n.hasNode(a))){const r=this.graph.getNodeType(a);console.log(`Valid node found: ${a} (${r})`),this._setIntermediateWaypoint(t,a,r)}else this._validateWaypoint(t)}}),e.addEventListener("input",()=>{clearTimeout(e._validationTimeout),e._validationTimeout=setTimeout(()=>{var n;const o=e.value.trim();if(o&&((n=this.graph)!=null&&n.hasNode(o))){const a=this.graph.getNodeType(o);console.log(`Auto-detected valid node: ${o} (${a})`),this._setIntermediateWaypoint(t,o,a)}},500)})}_validateWaypoint(t){var s,o;const e=(s=this.waypointsContainer)==null?void 0:s.querySelector(`#waypoint-${t}`);if(!e)return;const i=e.value.trim();if(console.log(`Manually validating waypoint ${t}:`,i),i&&((o=this.graph)!=null&&o.hasNode(i))){const n=this.graph.getNodeType(i);console.log(`Manual validation successful: ${i} (${n})`),this._setIntermediateWaypoint(t,i,n)}else console.log(`Manual validation failed: ${i} not found in graph`),console.log("Available nodes sample:",Array.from(this.graph.nodes).slice(0,10))}_setIntermediateWaypoint(t,e,i){var s;if(console.log(`Setting waypoint ${t}:`,{nodeId:e,nodeType:i}),t>=0&&t<this.intermediateWaypoints.length){const o=((s=this.graph)==null?void 0:s.getNodeCoordinates(e))||null;this.intermediateWaypoints[t]={...this.intermediateWaypoints[t],id:e,type:i,coordinates:o},console.log(`Waypoint ${t} set to:`,this.intermediateWaypoints[t]),this._updateWaypointsDisplay(),this._setupWaypointAutocomplete(t),this._emitEvent("waypoint:updated",{waypointIndex:t,nodeId:e,nodeType:i,totalWaypoints:this.intermediateWaypoints.filter(n=>n.id).length})}}_removeIntermediateWaypoint(t){t>=0&&t<this.intermediateWaypoints.length&&(this.intermediateWaypoints[t].autocomplete&&this.intermediateWaypoints[t].autocomplete.destroy(),this.intermediateWaypoints.splice(t,1),this._updateWaypointsDisplay(),this.intermediateWaypoints.forEach((e,i)=>{this._setupWaypointAutocomplete(i)}))}_handleSubmitWithWaypoints(t){if(console.log("Handling submit with waypoints:",t),!t.hasWaypoints){console.log("No waypoints detected, using regular pathfinding"),this._emitEvent("pathfinding:submit",{source:t.source,target:t.target});return}console.log("Waypoints detected, calculating waypoint route"),this._calculateWaypointRoute(t)}async _calculateWaypointRoute(t){if(!this.pathfinder){this.showResult("<h3>⚠️ Pathfinder not available</h3><p>Please load the graph data first.</p>","error");return}try{const e=[t.source,...t.waypoints,t.target],i=[];this.showLoading("Calculating route with waypoints...");for(let s=0;s<e.length-1;s++){const o=e[s],n=e[s+1];this.showLoading(`Calculating segment ${s+1}/${e.length-1}: ${o} → ${n}`),console.log(`Trying to find path: ${o} → ${n}`);const a=this.pathfinder.findPath(o,n,{maxDepth:2e3});console.log("Path result:",a);const r=this.pathfinder.getPathDetails(a);if(console.log("Path details:",r),!r)throw console.error(`Failed to find path between ${o} and ${n}`),new Error(`No path found between ${o} and ${n}`);i.push({from:o,to:n,path:a,pathDetails:r,segmentIndex:s}),await new Promise(l=>setTimeout(l,50))}this._displayWaypointResults(e,i),this._emitEvent("waypoint:route-calculated",{routePoints:e,segments:i,totalSegments:i.length})}catch(e){console.error("Waypoint route calculation failed:",e),this.showResult(`
        <h3>❌ Waypoint Route Failed</h3>
        <p><strong>Error:</strong> ${e.message}</p>
      `,"error")}}_displayWaypointResults(t,e){const i=e.reduce((n,a)=>n+a.path.length-1,1),s=e.reduce((n,a)=>n+a.pathDetails.summary.waypointsUsed,0);let o=`
      <h3>✅ Route with Waypoints Calculated!</h3>
      <div class="path-summary">
        <p><strong>Route Points:</strong> ${t.length} (${t.length-2} intermediate)</p>
        <p><strong>Route Segments:</strong> ${e.length}</p>
        <p><strong>Total Path Nodes:</strong> ${i}</p>
        <p><strong>Waypoints Used:</strong> ${s}</p>
        <p><strong>From:</strong> ${t[0]}</p>
        <p><strong>Via:</strong> ${t.slice(1,-1).join(", ")||"None"}</p>
        <p><strong>To:</strong> ${t[t.length-1]}</p>
      </div>
      
      <h4>🛤️ Route Segments:</h4>
      <div class="path-nodes">
    `;e.forEach((n,a)=>{const r=n.path.join(" → ");o+=`
        <div class="route-segment">
          <div class="segment-header">
            <strong>Segment ${a+1}:</strong> 
            <span class="path-node">${n.from}</span> → 
            <span class="path-node">${n.to}</span>
            <small>(${n.path.length} nodes, ${n.pathDetails.summary.waypointsUsed} waypoints)</small>
          </div>
          <div class="segment-path">
            ${r}
          </div>
        </div>
      `}),o+="</div>",o+=`
      <h4>📄 Export Options:</h4>
      <div class="export-actions">
        <button onclick="app.exportWaypointGeoJSON()" class="export-button">📋 Copy GeoJSON</button>
        <button onclick="app.copyPathGeoJSON()" class="export-button">📋 Copy Simple GeoJSON</button>
        <button onclick="app.downloadPathGeoJSON()" class="export-button">💾 Download GeoJSON</button>
      </div>
    `,this.showResult(o,"success")}_emitEvent(t,e){const i=new CustomEvent(t,{detail:e,bubbles:!0});this.formElement.dispatchEvent(i)}destroy(){this.sourceAutocomplete&&this.sourceAutocomplete.destroy(),this.targetAutocomplete&&this.targetAutocomplete.destroy(),this.intermediateWaypoints.forEach(t=>{t.autocomplete&&t.autocomplete.destroy()}),this.intermediateWaypoints=[]}}class R{constructor(t,e={}){if(!(t instanceof HTMLElement))throw new Error("Container element must be an HTMLElement");this.containerElement=t,this.options={defaultCenter:[-123.250617,49.263428],defaultZoom:20,defaultPitch:45,defaultBearing:0,mapStyle:"https://basemaps.cartocdn.com/gl/positron-gl-style/style.json",enableControls:!0,enableFallback:!0,...e},this.map=null,this.deckOverlay=null,this.graph=null,this.currentPath=null,this.layerVisibility={waypoints:!1,fixtures:!0,walkingPaths:!1,currentPath:!0},this._initializeComponent()}_initializeComponent(){this._checkDependencies(),this._createMap(),this._setupEventListeners()}_checkDependencies(){if(this.hasMapLibre=typeof maplibregl<"u",this.hasDeckGL=typeof deck<"u",!this.hasMapLibre&&this.options.enableFallback){console.warn("MapLibre GL not available, using fallback visualization"),this._createFallbackVisualization();return}if(!this.hasMapLibre)throw new Error("MapLibre GL is required for map visualization")}_createMap(){if(this.hasMapLibre)try{this.map=new maplibregl.Map({container:this.containerElement,style:this.options.mapStyle,center:this.options.defaultCenter,zoom:this.options.defaultZoom,pitch:this.options.defaultPitch,bearing:this.options.defaultBearing}),this.hasDeckGL&&(this.deckOverlay=new deck.MapboxOverlay({interleaved:!0}),this.map.addControl(this.deckOverlay),this.deckOverlay.setProps({getTooltip:this._getTooltip.bind(this),onClick:this._onClick.bind(this),onHover:this._onHover.bind(this),getCursor:this._getCursor.bind(this)})),this.options.enableControls&&this.map.addControl(new maplibregl.NavigationControl,"top-left"),this.map.on("load",()=>{this._onMapLoad()}),this.map.on("error",t=>{console.error("Map error:",t),this.options.enableFallback&&this._createFallbackVisualization()})}catch(t){if(console.error("Error creating map:",t),this.options.enableFallback)this._createFallbackVisualization();else throw t}}_setupEventListeners(){this.map&&this.options.enableViewportLogging&&(this.map.on("moveend",()=>this._logViewport()),this.map.on("zoomend",()=>this._logViewport()))}_onMapLoad(){this._updateLayers(),this._dispatchEvent("map:loaded")}setGraph(t){this.graph=t,this._updateLayers()}setCurrentPath(t){this.currentPath=t,this._updateLayers(),t&&this.map&&this._fitToPath(t),!this.map&&this.options.enableFallback&&this._updateFallbackVisualization()}toggleLayer(t){t in this.layerVisibility&&(this.layerVisibility[t]=!this.layerVisibility[t],this._updateLayers(),this._dispatchEvent("layer:toggled",{layer:t,visible:this.layerVisibility[t]}))}resetView(){this.map&&this.map.flyTo({center:this.options.defaultCenter,zoom:this.options.defaultZoom,pitch:this.options.defaultPitch,bearing:this.options.defaultBearing})}_fitToPath(t){if(!t||!t.nodes||!this.map)return;const e=t.nodes.filter(i=>i.coordinates).map(i=>i.coordinates);if(e.length!==0)if(e.length===1)this.map.flyTo({center:e[0],zoom:Math.max(this.options.defaultZoom,this.map.getZoom())});else{const i=e.reduce((s,o)=>s.extend(o),new maplibregl.LngLatBounds(e[0],e[0]));this.map.fitBounds(i,{padding:50,maxZoom:22})}}_updateLayers(){if(!this.deckOverlay||!this.graph)return;const t=[];this.layerVisibility.waypoints&&t.push(this._createWaypointsLayer()),this.layerVisibility.fixtures&&t.push(...this._createFixturesLayers()),this.layerVisibility.walkingPaths&&t.push(this._createWalkingPathsLayer()),this.layerVisibility.currentPath&&this.currentPath&&t.push(this._createCurrentPathLayer());try{this.deckOverlay.setProps({layers:t.filter(Boolean)})}catch(e){console.error("Error updating deck.gl layers:",e)}}_createWaypointsLayer(){if(!this.hasDeckGL)return null;const t=Array.from(this.graph.nodes).filter(e=>this.graph.getNodeType(e)==="waypoint").map(e=>({position:this.graph.getNodeCoordinates(e),name:e,type:"waypoint"})).filter(e=>e.position);return new deck.ScatterplotLayer({id:"waypoints",data:t,pickable:!0,opacity:.8,stroked:!0,filled:!0,radiusScale:1,radiusMinPixels:1,radiusMaxPixels:1,lineWidthMinPixels:.1,lineWidthMaxPixels:1,getPosition:e=>e.position,getRadius:e=>1,getFillColor:[30,144,255,180],getLineColor:[0,0,139,255]})}_createFixturesLayers(){if(!this.hasDeckGL)return[];const t=[],e=[],i=[];return Array.from(this.graph.nodes).filter(s=>this.graph.getNodeType(s)!=="waypoint").forEach(s=>{var r;const o=this.graph.getNodeType(s),n=this._getFixtureColor(o),a=(r=this.graph.fixturePolygons)==null?void 0:r.get(s);if(a)e.push({polygon:a,name:s,type:o,color:n});else{const l=this.graph.getNodeCoordinates(s);l&&i.push({position:l,name:s,type:o,color:n})}}),console.log(`🔍 Fixture polygon data: ${e.length} polygons`),e.length>0&&(console.log("✅ Adding polygon layer with data:",e.slice(0,3)),t.push(new deck.PolygonLayer({id:"fixture-polygons",data:e,pickable:!0,filled:!0,stroked:!0,lineWidthMinPixels:1,lineWidthMaxPixels:2,getPolygon:s=>s.polygon,getFillColor:s=>s.color,getLineColor:s=>[s.color[0]*.7,s.color[1]*.7,s.color[2]*.7,200]}))),i.length>0&&t.push(new deck.ScatterplotLayer({id:"fixture-points",data:i,pickable:!0,opacity:.9,stroked:!0,filled:!0,radiusScale:8,radiusMinPixels:4,radiusMaxPixels:12,lineWidthMinPixels:2,getPosition:s=>s.position,getRadius:s=>6,getFillColor:s=>s.color,getLineColor:[0,0,0,255]})),t}_createWalkingPathsLayer(){return!this.hasDeckGL||!this.graph.walkingPaths?null:new deck.PathLayer({id:"walking-paths",data:this.graph.walkingPaths,pickable:!1,widthScale:1,widthMinPixels:1,widthMaxPixels:2,getPath:t=>t.path,getWidth:t=>1,getColor:[200,200,200,100]})}_createCurrentPathLayer(){if(!this.hasDeckGL||!this.currentPath)return null;const t=this.currentPath.nodes.filter(e=>e.coordinates).map(e=>e.coordinates);return t.length<2?null:new deck.PathLayer({id:"current-path",data:[{path:t,name:`Path: ${this.currentPath.path[0]} to ${this.currentPath.path[this.currentPath.path.length-1]}`}],pickable:!0,widthScale:4,widthMinPixels:4,widthMaxPixels:8,getPath:e=>e.path,getWidth:e=>4,getColor:[255,107,53,200]})}_getFixtureColor(t){return{di_box:[255,140,0,120],cabinet:[123,31,162,120],fossil:[50,205,50,120]}[t]||[128,128,128,120]}_createFallbackVisualization(){this.containerElement.innerHTML=`
      <div class="fallback-visualization">
        <h3>🗺️ Route Visualization</h3>
        <div class="fallback-content">
          <div class="fallback-message">
            Map visualization requires MapLibre GL. Path data will be shown here when available.
          </div>
        </div>
      </div>
    `;const t=document.createElement("style");t.textContent=`
      .fallback-visualization {
        height: 100%;
        background: linear-gradient(135deg, #f0f0f0 0%, #e0e0e0 100%);
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        position: relative;
      }
      .fallback-content {
        height: 400px;
        background: white;
        border-radius: 8px;
        position: relative;
        overflow: hidden;
        border: 2px solid #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .fallback-message {
        color: #666;
        font-size: 14px;
      }
      .fallback-path-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        border-left: 4px solid #ff6b35;
        text-align: left;
        margin: 10px;
      }
    `,document.head.appendChild(t)}_updateFallbackVisualization(){const t=this.containerElement.querySelector(".fallback-content");t&&(this.currentPath&&this.currentPath.nodes.length>0?t.innerHTML=`
        <div class="fallback-path-info">
          <h4>📍 Current Path</h4>
          <div><strong>From:</strong> ${this.currentPath.summary.start.id} (${this.currentPath.summary.start.type})</div>
          <div><strong>To:</strong> ${this.currentPath.summary.end.id} (${this.currentPath.summary.end.type})</div>
          <div><strong>Route Length:</strong> ${this.currentPath.path.length} nodes</div>
          <div><strong>Waypoints Used:</strong> ${this.currentPath.summary.waypointsUsed}</div>
          <div style="margin-top: 10px; font-size: 12px; color: #666;">
            <strong>Path:</strong><br>
            ${this.currentPath.path.join(" → ")}
          </div>
        </div>
      `:t.innerHTML=`
        <div class="fallback-message">
          <div style="font-size: 24px; margin-bottom: 10px;">🗺️</div>
          <div>Calculate a path to see route visualization</div>
          <div style="font-size: 12px; margin-top: 10px; color: #888;">
            ${this.graph?`${this.graph.nodes.size} nodes loaded`:"Loading graph data..."}
          </div>
        </div>
      `)}_logViewport(){if(this.map){const t=this.map.getCenter(),e=this.map.getZoom(),i=this.map.getBearing(),s=this.map.getPitch();console.log("Viewport:",{center:[t.lng,t.lat],zoom:e,bearing:i,pitch:s})}}_dispatchEvent(t,e={}){this.containerElement.dispatchEvent(new CustomEvent(t,{detail:e}))}_getTooltip(t){if(!t.object)return null;const{object:e,layer:i}=t;if(i.id==="waypoints")return{html:`
          <div style="background: rgba(0,0,0,0.8); color: white; padding: 8px 12px; border-radius: 4px; font-size: 12px; max-width: 200px;">
            <div style="font-weight: bold; color: #1e90ff;">🔵 Waypoint</div>
            <div style="margin: 4px 0;"><strong>ID:</strong> ${e.name}</div>
            <div style="font-size: 10px; color: #ccc;">Click to copy ID</div>
          </div>
        `,style:{fontSize:"12px",zIndex:1e3}};if(i.id==="fixture-polygons"||i.id==="fixture-points"){const s={di_box:"#ff8c00",cabinet:"#7b1fa2",fossil:"#32cd32"},o={di_box:"🟠",cabinet:"🟣",fossil:"🟢"},n={di_box:"DI Box",cabinet:"Cabinet",fossil:"Fossil Excavation"};return{html:`
          <div style="background: rgba(0,0,0,0.8); color: white; padding: 8px 12px; border-radius: 4px; font-size: 12px; max-width: 200px;">
            <div style="font-weight: bold; color: ${s[e.type]||"#666"};">
              ${o[e.type]||"📍"} ${n[e.type]||e.type}
            </div>
            <div style="margin: 4px 0;"><strong>ID:</strong> ${e.name}</div>
            <div style="font-size: 10px; color: #ccc;">Click to copy ID</div>
          </div>
        `,style:{fontSize:"12px",zIndex:1e3}}}return i.id==="current-path"?{html:`
          <div style="background: rgba(0,0,0,0.8); color: white; padding: 8px 12px; border-radius: 4px; font-size: 12px; max-width: 200px;">
            <div style="font-weight: bold; color: #ff6b35;">🔶 Current Path</div>
            <div style="margin: 4px 0;">${e.name}</div>
          </div>
        `,style:{fontSize:"12px",zIndex:1e3}}:null}_onClick(t){var o,n;if(!t.object)return;const{object:e,layer:i}=t;let s=null;(i.id==="waypoints"||i.id==="fixture-polygons"||i.id==="fixture-points")&&(s=e.name),s&&(this._copyToClipboard(s),this._showClickFeedback(t.x,t.y,s),this._dispatchEvent("node:clicked",{nodeId:s,nodeType:(o=this.graph)==null?void 0:o.getNodeType(s),coordinates:(n=this.graph)==null?void 0:n.getNodeCoordinates(s),clickPosition:{x:t.x,y:t.y}}))}_onHover(t){var e,i;if(t.object){const{object:s,layer:o}=t;let n=null;(o.id==="waypoints"||o.id==="fixture-polygons"||o.id==="fixture-points")&&(n=s.name),n&&this._dispatchEvent("node:hovered",{nodeId:n,nodeType:(e=this.graph)==null?void 0:e.getNodeType(n),coordinates:(i=this.graph)==null?void 0:i.getNodeCoordinates(n),hoverPosition:{x:t.x,y:t.y}})}}_getCursor(t){if(t.object){const{layer:e}=t;if(e.id==="waypoints"||e.id==="fixture-polygons"||e.id==="fixture-points")return"pointer"}return"grab"}async _copyToClipboard(t){try{await navigator.clipboard.writeText(t),console.log(`Copied "${t}" to clipboard`)}catch(e){console.warn("Failed to copy to clipboard:",e);const i=document.createElement("textarea");i.value=t,i.style.position="fixed",i.style.left="-999999px",i.style.top="-999999px",document.body.appendChild(i),i.select(),document.execCommand("copy"),document.body.removeChild(i)}}_showClickFeedback(t,e,i){const s=document.createElement("div");s.style.cssText=`
      position: fixed;
      left: ${t}px;
      top: ${e}px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      z-index: 10000;
      pointer-events: none;
      transform: translate(-50%, -100%);
      animation: clickFeedback 1.5s ease-out forwards;
    `,s.textContent=`Copied: ${i}`;const o=document.createElement("style");o.textContent=`
      @keyframes clickFeedback {
        0% { opacity: 1; transform: translate(-50%, -100%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -120%) scale(0.9); }
      }
    `,document.head.appendChild(o),document.body.appendChild(s),setTimeout(()=>{document.body.contains(s)&&document.body.removeChild(s),document.head.contains(o)&&document.head.removeChild(o)},1500)}destroy(){this.map&&(this.map.remove(),this.map=null),this.deckOverlay=null,this.graph=null,this.currentPath=null}}class G{constructor(){this.dataManager=null,this.graph=null,this.pathfinder=null,this.formComponent=null,this.mapComponent=null,this.isInitialized=!1,this.isGraphLoaded=!1,this._initializeApp()}async _initializeApp(){try{this._setupComponents(),this._bindEvents(),this._updateStatus('Application initialized. Click "Load Graph Data" to begin.',"info"),await this._loadGraphData(),this.isInitialized=!0}catch(t){console.error("Failed to initialize application:",t),this._updateStatus(`Initialization failed: ${t.message}`,"error")}}_setupComponents(){const t=document.getElementById("pathfindingForm");t&&(this.formComponent=new I(t));const e=document.getElementById("mapContainer");e&&(this.mapComponent=new R(e,{enableFallback:!0,enableControls:!0})),this.dataManager=new C}_bindEvents(){this.formComponent&&(this.formComponent.formElement.addEventListener("pathfinding:submit",t=>{this._handlePathfindingRequest(t.detail)}),this.formComponent.formElement.addEventListener("pathfinding:load-graph",()=>{this._loadGraphData()}),this.formComponent.formElement.addEventListener("pathfinding:autocomplete-select",t=>{this._handleAutocompleteSelect(t.detail)}),this.formComponent.formElement.addEventListener("waypoint:route-calculated",t=>{this._handleWaypointRouteCalculated(t.detail)})),this.mapComponent&&(this.mapComponent.containerElement.addEventListener("map:loaded",()=>{this._updateStatus("Map loaded successfully!","success")}),this.mapComponent.containerElement.addEventListener("layer:toggled",t=>{this._handleLayerToggle(t.detail)})),this.formComponent&&(this.formComponent.formElement.addEventListener("multipoint:route-calculated",t=>{this._handleMultiPointRouteCalculated(t.detail)}),this.formComponent.formElement.addEventListener("multipoint:updated",t=>{this._handleMultiPointUpdated(t.detail)})),document.addEventListener("keydown",t=>{this._handleKeyboardShortcuts(t)}),this._setupExampleButtons()}async _loadGraphData(){var t;if(!this.isGraphLoaded)try{this._updateStatus("Loading wayfinding network...","info"),(t=this.formComponent)==null||t.showLoading("Loading wayfinding data...");const e="./public/geojson/wayfinding.geojson",i=C.getDefaultFixtureUrls("./public/geojson");if(this.graph=await this.dataManager.loadAndBuildGraph(e,i),this.pathfinder=new T(this.graph),this._testFossilConnectivity(),this.formComponent){const o=Array.from(this.graph.nodes);this.formComponent.setAutocompleteData(o,this.graph.nodeTypes),this.formComponent.setPathfinder(this.pathfinder,this.graph),this.formComponent.setGraphLoaded(!0)}this.mapComponent&&this.mapComponent.setGraph(this.graph);const s=this.graph.getStatistics();this._showGraphLoadedResult(s),this._updateStatus("Graph loaded successfully!","success",s),this.isGraphLoaded=!0}catch(e){console.error("Failed to load graph data:",e),this._updateStatus(`Failed to load graph: ${e.message}`,"error"),this.formComponent&&this.formComponent.showResult(`
          <h3>❌ Error Loading Graph</h3>
          <p>Failed to load wayfinding data: ${e.message}</p>
          <p>Please check that:</p>
          <ul>
            <li>The wayfinding.geojson file is accessible</li>
            <li>You're running this from a web server (not file://)</li>
            <li>All required GeoJSON files are present</li>
          </ul>
        `,"error")}}async _handlePathfindingRequest({source:t,target:e}){var i,s,o,n,a;if(!this.isGraphLoaded||!this.pathfinder){(i=this.formComponent)==null||i.showResult(`
        <h3>⚠️ Graph Not Loaded</h3>
        <p>Please load the graph data first.</p>
      `,"error");return}try{(s=this.formComponent)==null||s.showLoading(`Finding path from ${t} to ${e}...`);const r=this.pathfinder.findPath(t,e),l=this.pathfinder.getPathDetails(r);if(l){this.mapComponent&&this.mapComponent.setCurrentPath(l);const h=this._formatPathResult(l);(o=this.formComponent)==null||o.showResult(h,"success"),this._updateStatus(`Path found: ${l.length} nodes`,"success")}else(n=this.formComponent)==null||n.showResult(`
          <h3>❌ No Path Found</h3>
          <p>Could not find a route from <strong>${t}</strong> to <strong>${e}</strong>.</p>
          <p>This might happen if:</p>
          <ul>
            <li>The fixtures are in disconnected parts of the network</li>
            <li>There are no waypoints connecting the fixtures</li>
            <li>The network structure has gaps</li>
          </ul>
        `,"error"),this._updateStatus("No path found","error")}catch(r){console.error("Pathfinding error:",r),(a=this.formComponent)==null||a.showResult(`
        <h3>❌ Pathfinding Error</h3>
        <p><strong>Error:</strong> ${r.message}</p>
      `,"error"),this._updateStatus(`Pathfinding error: ${r.message}`,"error")}}_handleAutocompleteSelect({field:t,nodeId:e,nodeType:i}){console.log(`Selected ${i} node: ${e} for field: ${t}`)}_handleLayerToggle({layer:t,visible:e}){console.log(`Layer ${t} is now ${e?"visible":"hidden"}`)}_handleMultiPointRouteCalculated({points:t,segments:e,totalSegments:i}){var s,o;if(console.log(`Multi-point route calculated: ${t.length} points, ${i} segments`),this.mapComponent){const n=[];e.forEach(r=>{const l=r.pathDetails.nodes.filter(h=>h.coordinates).map(h=>h.coordinates);n.push(...l)});const a={path:e.flatMap(r=>r.path.slice(0,-1)).concat(((s=e[e.length-1])==null?void 0:s.path)||[]),nodes:e.flatMap(r=>r.pathDetails.nodes.slice(0,-1)).concat(((o=e[e.length-1])==null?void 0:o.pathDetails.nodes)||[]),length:e.reduce((r,l)=>r+l.path.length-1,1),summary:{start:{id:t[0].id,type:t[0].type},end:{id:t[t.length-1].id,type:t[t.length-1].type},waypointsUsed:e.reduce((r,l)=>r+l.pathDetails.summary.waypointsUsed,0)}};this.mapComponent.setCurrentPath(a)}this._updateStatus(`Multi-point route calculated: ${i} segments`,"success")}_handleWaypointRouteCalculated({routePoints:t,segments:e,totalSegments:i}){if(console.log(`Waypoint route calculated: ${t.length} points, ${i} segments`),this.mapComponent){const s=[];e.forEach((a,r)=>{const l=a.pathDetails.nodes;r===0?s.push(...l):s.push(...l.slice(1))});const o=e.flatMap((a,r)=>r===0?a.path:a.path.slice(1)),n={path:o,nodes:s,length:o.length,summary:{start:{id:t[0],type:e[0].pathDetails.summary.start.type},end:{id:t[t.length-1],type:e[e.length-1].pathDetails.summary.end.type},waypointsUsed:e.reduce((a,r)=>a+r.pathDetails.summary.waypointsUsed,0)}};this.mapComponent.setCurrentPath(n)}this._updateStatus(`Waypoint route calculated: ${i} segments through ${t.length} points`,"success")}_handleKeyboardShortcuts(t){var e,i;if((t.ctrlKey||t.metaKey)&&t.key==="Enter")if(t.preventDefault(),this.isGraphLoaded){const s=(e=this.formComponent)==null?void 0:e.getFormData();s&&s.source&&s.target&&this._handlePathfindingRequest(s)}else this._loadGraphData();t.key==="Escape"&&((i=this.formComponent)==null||i.clearResults())}_setupExampleButtons(){[{source:"di_27_18_top",target:"fossil_excavation_1",label:"DI Box → Fossil"},{source:"col_1_cab_01",target:"di_05_01_top",label:"Cabinet → DI Box"},{source:"fossil_excavation_1",target:"col_2_cab_15",label:"Fossil → Cabinet"},{source:"wp_001",target:"wp_025",label:"Waypoint → Waypoint"},{source:"wp_010",target:"di_27_18_top",label:"Waypoint → DI Box"}].forEach(e=>{const i=document.querySelector(`[data-source="${e.source}"][data-target="${e.target}"]`);i&&i.addEventListener("click",()=>{var s;(s=this.formComponent)==null||s.setExample(e.source,e.target)})})}_showGraphLoadedResult(t){this.formComponent&&((t.nodeTypes.di_box||0)+(t.nodeTypes.cabinet||0)+(t.nodeTypes.fossil||0),this.formComponent.showResult(`
            <div class="ready-message">
        <strong>💡 Ready to use!</strong> Start typing in the input fields for autocomplete suggestions, or use the quick example buttons below.
      </div>
      <h3>✅ Walking Routes Loaded Successfully!</h3>

      <div class="node-types">
        <h4>Node Types Breakdown:</h4>
        <ul>
          <li>🔵 Waypoints: ${(t.nodeTypes.waypoint||0).toLocaleString()} (navigation grid points)</li>
          <li>🟠 DI Boxes: ${(t.nodeTypes.di_box||0).toLocaleString()} (display drawers)</li>
          <li>🟣 Cabinets: ${(t.nodeTypes.cabinet||0).toLocaleString()} (storage/equipment)</li>
          <li>🟢 Fossil Excavations: ${(t.nodeTypes.fossil||0).toLocaleString()} (dig sites)</li>
        </ul>
      </div>

    `,"success"))}_formatPathResult(t){const{nodes:e,summary:i,path:s}=t;let o=`
      <h3>✅ Path Found!</h3>
      <div class="path-summary">
        <p><strong>Route Length:</strong> ${s.length} nodes</p>
        <p><strong>Waypoints Used:</strong> ${i.waypointsUsed}</p>
        <p><strong>From:</strong> ${i.start.id} (${i.start.type})</p>
        <p><strong>To:</strong> ${i.end.id} (${i.end.type})</p>
      </div>
      
      <h4>Full Path:</h4>
      <div class="path-nodes">
    `;return e.forEach((n,a)=>{o+=`<span class="path-node ${n.type}">${n.id}</span>`,a<e.length-1&&(o+=" → ")}),o+="</div>",o+='<h4>Node Details:</h4><div class="node-details">',e.forEach(n=>{o+=`
        <div class="node-detail">
          <strong>${n.id}</strong> (${n.type})
          ${n.coordinates?`<div class="coordinates">Coordinates: [${n.coordinates[0].toFixed(6)}, ${n.coordinates[1].toFixed(6)}]</div>`:'<div class="no-coordinates">No coordinates available</div>'}
        </div>
      `}),o+="</div>",o+=`
      <h4>📄 Export as GeoJSON:</h4>
      <div class="export-actions">
        <button onclick="app.copyPathGeoJSON()" class="export-button">📋 Copy GeoJSON</button>
        <button onclick="app.downloadPathGeoJSON()" class="export-button">💾 Download GeoJSON</button>
      </div>
      <details class="geojson-details">
        <summary>📝 View GeoJSON Code</summary>
        <pre class="geojson-code">${JSON.stringify(this._generatePathGeoJSON(t),null,2)}</pre>
      </details>
    `,o}_generatePathGeoJSON(t){if(!t)return null;const e=[],{nodes:i,path:s}=t,o=i.filter(n=>n.coordinates).map(n=>n.coordinates);return o.length>1&&e.push({type:"Feature",properties:{name:`Path: ${s[0]} to ${s[s.length-1]}`,description:`Route from ${s[0]} to ${s[s.length-1]} via waypoints`,path_type:"fixture_to_fixture",nodes:s,stroke:"#ff6b35","stroke-width":4,"stroke-opacity":.8},geometry:{type:"LineString",coordinates:o}}),i.forEach((n,a)=>{if(!n.coordinates)return;const r={di_box:"#ff8c00",cabinet:"#7b1fa2",fossil:"#32cd32",waypoint:"#1e90ff"},l={di_box:"industrial",cabinet:"warehouse",fossil:"monument",waypoint:"circle"};e.push({type:"Feature",properties:{name:n.id,type:n.type,"marker-color":r[n.type]||"#666666","marker-size":n.type==="waypoint"?"small":"medium","marker-symbol":l[n.type]||"circle",order:a+1},geometry:{type:"Point",coordinates:n.coordinates}})}),{type:"FeatureCollection",features:e}}async copyPathGeoJSON(){var s;const t=(s=this.mapComponent)==null?void 0:s.currentPath;if(!t){alert("No path data available to copy");return}const e=this._generatePathGeoJSON(t),i=JSON.stringify(e,null,2);try{await navigator.clipboard.writeText(i),this._showTemporaryMessage("✅ GeoJSON copied to clipboard!")}catch(o){console.error("Failed to copy to clipboard:",o);const n=document.querySelector(".geojson-code");if(n){const a=document.createRange();a.selectNodeContents(n);const r=window.getSelection();r.removeAllRanges(),r.addRange(a),alert("GeoJSON selected. Press Ctrl+C (or Cmd+C) to copy.")}}}downloadPathGeoJSON(){var a;const t=(a=this.mapComponent)==null?void 0:a.currentPath;if(!t){alert("No path data available to download");return}const e=this._generatePathGeoJSON(t),i=JSON.stringify(e,null,2),s=new Blob([i],{type:"application/json"}),o=URL.createObjectURL(s),n=document.createElement("a");n.href=o,n.download=`path_${t.path[0]}_to_${t.path[t.path.length-1]}.geojson`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(o),this._showTemporaryMessage("✅ GeoJSON file downloaded!")}_updateStatus(t,e="info",i=null){var o,n,a,r;const s=document.getElementById("statusText");if(s){let l=t;if(i){const h=(((o=i.nodeTypes)==null?void 0:o.di_box)||0)+(((n=i.nodeTypes)==null?void 0:n.cabinet)||0)+(((a=i.nodeTypes)==null?void 0:a.fossil)||0);l+=`<br><small>📊 Data: ${i.totalNodes} nodes, ${h} fixtures, ${((r=i.nodeTypes)==null?void 0:r.waypoint)||0} waypoints</small>`}s.innerHTML=l,s.className=`status-${e}`}}_showTemporaryMessage(t,e=2e3){const i=document.createElement("div");i.className="temporary-message",i.textContent=t,i.style.cssText=`
      position: fixed;
      top: 20px;
      right: 20px;
      background: #28a745;
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      z-index: 10000;
      font-weight: bold;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    `,document.body.appendChild(i),setTimeout(()=>{document.body.contains(i)&&document.body.removeChild(i)},e)}toggleLayer(t){console.log(`🔍 Toggling layer: ${t}`),this.mapComponent&&this.mapComponent.toggleLayer(t)}resetMapView(){this.mapComponent&&this.mapComponent.resetView()}getStats(){return{isInitialized:this.isInitialized,isGraphLoaded:this.isGraphLoaded,graphStats:this.graph?this.graph.getStatistics():null}}_testFossilConnectivity(){console.log("🧪 TESTING ALL FOSSIL CONNECTIVITY");const t=Array.from(this.graph.nodes),e=t.filter(a=>a.startsWith("fossil_excavation_"));console.log(`Found ${e.length} fossil nodes:`,e);let i=0,s=0;const o=[];for(let a=0;a<e.length;a++)for(let r=0;r<e.length;r++)if(a!==r){const l=e[a],h=e[r];i++;const d=this.pathfinder.findPath(l,h,{maxDepth:2e3});d?(s++,console.log(`✅ ${l} → ${h}: ${d.join(" → ")}`)):(o.push(`${l} → ${h}`),console.log(`❌ ${l} → ${h}: NO PATH`))}console.log("🧪 FOSSIL CONNECTIVITY TEST RESULTS:"),console.log(`Total tests: ${i}`),console.log(`Successful paths: ${s}`),console.log(`Failed paths: ${o.length}`),console.log(`Success rate: ${(s/i*100).toFixed(1)}%`),o.length>0&&console.log("❌ FAILED PATHS:",o),console.log("🧪 TESTING FOSSIL-TO-WAYPOINT CONNECTIVITY");const n=t.filter(a=>a.startsWith("wp_")).slice(0,5);e.forEach(a=>{const r=[];n.forEach(l=>{this.pathfinder.findPath(a,l)&&r.push(l)}),console.log(`${a} connects to waypoints: ${r.join(", ")||"NONE"}`)})}destroy(){this.formComponent&&this.formComponent.destroy(),this.mapComponent&&this.mapComponent.destroy()}}let P;document.addEventListener("DOMContentLoaded",()=>{P=new G,window.app=P});
